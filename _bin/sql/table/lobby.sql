DROP TABLE IF EXISTS lobbys, lobby_slots, lobby_members, lobby_requests, lobby_invitations, lobby_bans CASCADE;
DROP TYPE IF EXISTS lobby_privacy, lobby_request_status CASCADE;
/*
code_auth: can_invite
*/
CREATE TYPE lobby_privacy AS ENUM('PRIVATE','DEFAULT');
CREATE TABLE lobbys(
  id int GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  check_join boolean NOT NULL DEFAULT FALSE,
  privacy lobby_privacy NOT NULL DEFAULT 'DEFAULT'::lobby_privacy,

  id_owner integer REFERENCES users NOT NULL,
  created_at timestamptz NOT NULL DEFAULT NOW(),

  free_slots integer NOT NULL DEFAULT 1,
  max_slots integer NOT NULL DEFAULT 2,
  CHECK(0 <= free_slots  AND 1 < max_slots AND free_slots < max_slots)
);

CREATE TABLE lobby_users(
  id_lobby integer REFERENCES lobbys,
  id_user integer REFERENCES users,
  PRIMARY KEY(id_lobby, id_user),
	CHECK(id_lobby<>0),
  --member
  fk_member integer REFERENCES users,
  UNIQUE(id_lobby, fk_member), --FK lobby_users
  joined_at timestamptz,
  --request
  fk_request integer REFERENCES users,
  UNIQUE(id_lobby, fk_request),
  waiting_approval boolean,
  id_creator integer REFERENCES users, --SET TO NULL IF lobby_users.fk_request EXISTS
  FOREIGN KEY(id_lobby, fk_request, id_creator) REFERENCES lobby_invitations(id_lobby, id_target, id_creator),
  --ban
  ban_resolved_at timestamptz,
  CHECK(
    ((fk_member IS NOT NULL AND joined_at IS NOT NULL)
    OR (fk_request IS NOT NULL AND waiting_approval IS NOT NULL)
    OR (ban_resolved_at < NOW()))
    AND fk_member IS NOT NULL::integer + fk_request IS NOT NULL::integer + ban_resolved_at < NOW()::integer = 1)
);
CREATE UNIQUE INDEX ON lobby_users(fk_request) WHERE id_creator IS NULL AND fk_request IS NOT NULL;

CREATE TABLE lobby_invitations(
  id_lobby integer REFERENCES lobbys ON DELETE CASCADE,
  id_target integer REFERENCES users,
  id_creator integer REFERENCES users,
  PRIMARY KEY(id_lobby, id_target, id_creator),
  --UNIQUE(id_creator, id_target) --useless / lobby_members is unique per user
  CHECK(id_creator<>id_target),

	--FOREIGN KEY(id_creator, id_target) REFERENCES friends?
  FOREIGN KEY(id_lobby, id_creator) REFERENCES lobby_users(id_lobby, fk_member) DEFERRABLE,
  FOREIGN KEY(id_lobby, id_target) REFERENCES lobby_users(id_lobby, fk_request) ON DELETE CASCADE
);
ALTER TABLE lobby_users
  ADD CONSTRAINT fk_lobby_request_creator
    FOREIGN KEY(id_lobby, fk_request, id_creator) REFERENCES lobby_invitations(id_lobby, id_target, id_creator) DEFERRABLE;